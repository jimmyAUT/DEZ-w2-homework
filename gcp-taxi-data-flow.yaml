id: gcp-taxi-data-flow
namespace: jimmyh
description: "Loop over Year-Month and Taxi Type combinations and trigger subflow"

tasks:
  - id: outer-loop
    type: io.kestra.plugin.core.flow.ForEach
    values: ["yellow", "green"]
    tasks:
      - id: inner-loop
        type: io.kestra.plugin.core.flow.ForEach
        values: ["2019-01", "2019-02", "2019-03", "2019-04", "2019-05", "2019-06", "2019-07", "2019-08", "2019-09", "2019-10", "2019-11", "2019-12",
                 "2020-01", "2020-02", "2020-03", "2020-04", "2020-05", "2020-06", "2020-07", "2020-08", "2020-09", "2020-10", "2020-11", "2020-12",
                 "2021-01", "2021-02", "2021-03", "2021-04", "2021-05", "2021-06", "2021-07"] 
        tasks:
          - id: set_label
            type: io.kestra.plugin.core.execution.Labels
            labels:
              file: "{{parents[0].taskrun.value}}_tripdata_{{taskrun.value}}.csv"
              taxi: "{{parents[0]}}.taskrun.value"

          - id: extract
            type: io.kestra.plugin.scripts.shell.Commands
            outputFiles:
              - "*.csv"
            taskRunner:
              type: io.kestra.plugin.core.runner.Process
            commands:
              - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{parents[0].taskrun.value}}/{{parents[0].taskrun.value}}_tripdata_{{taskrun.value}}.csv.gz | gunzip > {{parents[0].taskrun.value}}_tripdata_{{taskrun.value}}.csv
                    
          - id: upload_to_gcs
            type: io.kestra.plugin.gcp.gcs.Upload
            from: "{{ outputs.extract[parents[0].taskrun.value][taskrun.value].outputFiles[parents[0].taskrun.value ~ '_tripdata_' ~ taskrun.value ~ '.csv'] }}"
            to: "gs://{{kv('GCP_BUCKET_NAME')}}/{{parents[0].taskrun.value}}_tripdata_{{taskrun.value}}.csv"

          - id: if_yellow_taxi
            type: io.kestra.plugin.core.flow.If
            condition: "{{parents[0].taskrun.value == 'yellow'}}"
            then:
              - id: bq_yellow_tripdata
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata`
                  (
                      unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
                      filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
                      VendorID STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
                      tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
                      tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
                      passenger_count INTEGER OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
                      trip_distance NUMERIC OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
                      RatecodeID STRING OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
                      store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. TRUE = store and forward trip, FALSE = not a store and forward trip'),
                      PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
                      DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
                      payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
                      fare_amount NUMERIC OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
                      extra NUMERIC OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
                      mta_tax NUMERIC OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
                      tip_amount NUMERIC OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
                      tolls_amount NUMERIC OPTIONS (description = 'Total amount of all tolls paid in trip.'),
                      improvement_surcharge NUMERIC OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
                      total_amount NUMERIC OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
                      congestion_surcharge NUMERIC OPTIONS (description = 'Congestion surcharge applied to trips in congested zones')
                  )
                  PARTITION BY DATE(tpep_pickup_datetime);

              - id: gcs_yellow_external_table
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_{{parents[0].taskrun.value}}_tripdata_ext`
                  (
                      VendorID STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
                      tpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
                      tpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
                      passenger_count INTEGER OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
                      trip_distance NUMERIC OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
                      RatecodeID STRING OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
                      store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. TRUE = store and forward trip, FALSE = not a store and forward trip'),
                      PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
                      DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
                      payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
                      fare_amount NUMERIC OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
                      extra NUMERIC OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
                      mta_tax NUMERIC OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
                      tip_amount NUMERIC OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
                      tolls_amount NUMERIC OPTIONS (description = 'Total amount of all tolls paid in trip.'),
                      improvement_surcharge NUMERIC OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
                      total_amount NUMERIC OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
                      congestion_surcharge NUMERIC OPTIONS (description = 'Congestion surcharge applied to trips in congested zones')
                  )
                  OPTIONS (
                      format = 'CSV',
                      uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{parents[1].taskrun.value}}_tripdata_{{parents[0].taskrun.value}}.csv'],
                      skip_leading_rows = 1,
                      ignore_unknown_values = TRUE
                  );

              - id: bq_yellow_table_staging
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging`
                  AS
                  SELECT
                    MD5(CONCAT(
                      COALESCE(CAST(VendorID AS STRING), ""),
                      COALESCE(CAST(tpep_pickup_datetime AS STRING), ""),
                      COALESCE(CAST(tpep_dropoff_datetime AS STRING), ""),
                      COALESCE(CAST(PULocationID AS STRING), ""),
                      COALESCE(CAST(DOLocationID AS STRING), "")
                    )) AS unique_row_id,
                    "{{parents[1].taskrun.value}}_tripdata_{{parents[0].taskrun.value}}" AS filename,
                    *
                  FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_{{parents[0].taskrun.value}}_tripdata_ext`;

              - id: bq_yellow_merge
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.yellow_tripdata` T
                  USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging` S
                  ON T.unique_row_id = S.unique_row_id
                  WHEN NOT MATCHED THEN
                    INSERT (unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge)
                    VALUES (S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID, S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge);

              - id: yellow_truncate_staging_table
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  TRUNCATE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging`;
  # ===============================================================================================================
          - id: if_green_taxi
            type: io.kestra.plugin.core.flow.If
            condition: "{{parents[0].taskrun.value == 'green'}}"
            then:
              - id: bq_green_tripdata
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata`
                  (
                      unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
                      filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
                      VendorID STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
                      lpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
                      lpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
                      store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
                      RatecodeID STRING OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
                      PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
                      DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
                      passenger_count INT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
                      trip_distance NUMERIC OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
                      fare_amount NUMERIC OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
                      extra NUMERIC OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
                      mta_tax NUMERIC OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
                      tip_amount NUMERIC OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
                      tolls_amount NUMERIC OPTIONS (description = 'Total amount of all tolls paid in trip.'),
                      ehail_fee NUMERIC,
                      improvement_surcharge NUMERIC OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
                      total_amount NUMERIC OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
                      payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
                      trip_type STRING OPTIONS (description = 'A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver. 1= Street-hail 2= Dispatch'),
                      congestion_surcharge NUMERIC OPTIONS (description = 'Congestion surcharge applied to trips in congested zones')
                  )
                  PARTITION BY DATE(lpep_pickup_datetime);

              - id: gcs_green_external_table
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_{{parents[0].taskrun.value}}_tripdata_ext`
                  (
                      VendorID STRING OPTIONS (description = 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.'),
                      lpep_pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was engaged'),
                      lpep_dropoff_datetime TIMESTAMP OPTIONS (description = 'The date and time when the meter was disengaged'),
                      store_and_fwd_flag STRING OPTIONS (description = 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip'),
                      RatecodeID STRING OPTIONS (description = 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride'),
                      PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was engaged'),
                      DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the taximeter was disengaged'),
                      passenger_count INT64 OPTIONS (description = 'The number of passengers in the vehicle. This is a driver-entered value.'),
                      trip_distance NUMERIC OPTIONS (description = 'The elapsed trip distance in miles reported by the taximeter.'),
                      fare_amount NUMERIC OPTIONS (description = 'The time-and-distance fare calculated by the meter'),
                      extra NUMERIC OPTIONS (description = 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges'),
                      mta_tax NUMERIC OPTIONS (description = '$0.50 MTA tax that is automatically triggered based on the metered rate in use'),
                      tip_amount NUMERIC OPTIONS (description = 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.'),
                      tolls_amount NUMERIC OPTIONS (description = 'Total amount of all tolls paid in trip.'),
                      ehail_fee NUMERIC,
                      improvement_surcharge NUMERIC OPTIONS (description = '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.'),
                      total_amount NUMERIC OPTIONS (description = 'The total amount charged to passengers. Does not include cash tips.'),
                      payment_type INTEGER OPTIONS (description = 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip'),
                      trip_type STRING OPTIONS (description = 'A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver. 1= Street-hail 2= Dispatch'),
                      congestion_surcharge NUMERIC OPTIONS (description = 'Congestion surcharge applied to trips in congested zones')
                  )
                  OPTIONS (
                      format = 'CSV',
                      uris = ['gs://{{kv('GCP_BUCKET_NAME')}}/{{parents[1].taskrun.value}}_tripdata_{{parents[0].taskrun.value}}.csv'],
                      skip_leading_rows = 1,
                      ignore_unknown_values = TRUE
                  );

              - id: bq_green_table_staging
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging`
                  AS
                  SELECT
                    MD5(CONCAT(
                      COALESCE(CAST(VendorID AS STRING), ""),
                      COALESCE(CAST(lpep_pickup_datetime AS STRING), ""),
                      COALESCE(CAST(lpep_dropoff_datetime AS STRING), ""),
                      COALESCE(CAST(PULocationID AS STRING), ""),
                      COALESCE(CAST(DOLocationID AS STRING), "")
                    )) AS unique_row_id,
                    "{{parents[1].taskrun.value}}_tripdata_{{parents[0].taskrun.value}}" AS filename,
                    *
                  FROM `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_{{parents[0].taskrun.value}}_tripdata_ext`;

              - id: bq_green_merge
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.green_tripdata` T
                  USING `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging` S
                  ON T.unique_row_id = S.unique_row_id
                  WHEN NOT MATCHED THEN
                    INSERT (unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge)
                    VALUES (S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime, S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count, S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee, S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge);

              - id: green_truncate_staging_table
                type: io.kestra.plugin.gcp.bigquery.Query
                sql: |
                  TRUNCATE TABLE `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.{{parents[1].taskrun.value}}_staging`;

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

